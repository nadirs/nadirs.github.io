<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Nadir's static website</title>
    <link href="http://nadirs.github.io/atom.xml" rel="self" />
    <link href="http://nadirs.github.io" />
    <id>http://nadirs.github.io/atom.xml</id>
    <author>
        <name>Nadir Sampaoli</name>
        <email>nadirsampaoli@gmail.com</email>
    </author>
    <updated>2014-06-28T00:00:00Z</updated>
    <entry>
    <title>Applicative Transformers: IdentityT</title>
    <link href="http://nadirs.github.io/posts/applicative-transformers.html" />
    <id>http://nadirs.github.io/posts/applicative-transformers.html</id>
    <published>2014-06-28T00:00:00Z</published>
    <updated>2014-06-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on June 28, 2014
    by Nadir Sampaoli
</div>

<p>Recently on Twitter, after reading about someone using Monad transformers for their first time, I’ve written some, as random as usual, tweet about the possibility of having applicative transformers.</p>
<p>Promptly <a href="http://twitter.com/bitemyapp">@bitemyapp</a> gave me some food for thoughts. He suggested to start simple, by trying to rewrite an Applicative version of <code>IdentityT</code>, which is the identity tranformer for monads.</p>
<blockquote class="twitter-tweet" lang="en"><p>
.<a href="https://twitter.com/nadirsampaoli"><span class="citation">@nadirsampaoli</span></a> a monad transformer takes a monad and returns a monad. Start simple - can you make IdentityT applicative?
</p>
— FKA da bear ʕノ•ᴥ•ʔノ (<span class="citation">@bitemyapp</span>) <a href="https://twitter.com/bitemyapp/statuses/482643698727915520">June 27, 2014</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2 id="the-initial-questions">The initial questions</h2>
<p>Everything started with some questions thrown a bit carelessly:</p>
<ol style="list-style-type: decimal">
<li>Do Applicative transformers exist?</li>
<li>Would they be useful?</li>
<li>Does it even make sense to think about such a thing?</li>
</ol>
<p>With some new (for me!) concepts to learn about, I entered the cabal sandbox I use for experiments, fired up a vim buffer, and started rewriting IdentityT as an Applicative Functor, instead of a Monad.</p>
<h2 id="what-exactly-is-identityt">What exactly is IdentityT?</h2>
<p>First of all, I needed to figure out what exactly <code>IdentityT</code> was about. A quick Hoogle search brings up the Hackage page for the package named <a href="http://hackage.haskell.org/package/transformers-0.4.1.0/docs/Control-Monad-Trans-Identity.html#t:IdentityT">Control.Monad.Trans.Identity</a>.</p>
<p>Without reflecting too much, I started writing down some mindless implementation of IdentityT as a Functor and Applicative instance:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# OPTIONS_GHC -Wall #-}</span>
<span class="ot">{-# LANGUAGE KindSignatures #-}</span>

<span class="kw">module</span> <span class="dt">ApplicativeTransformers</span>
    ( <span class="dt">IdentityT</span>(<span class="fu">..</span>)
    ) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Applicative</span>

<span class="kw">newtype</span> <span class="dt">IdentityT</span> (<span class="ot">f ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>) a <span class="fu">=</span> <span class="dt">IdentityT</span> {<span class="ot"> runIdentityT ::</span> f a } <span class="kw">deriving</span> (<span class="dt">Show</span>)

<span class="kw">instance</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Functor</span> (<span class="dt">IdentityT</span> f) <span class="kw">where</span>
    fmap h (<span class="dt">IdentityT</span> f) <span class="fu">=</span> <span class="dt">IdentityT</span> <span class="fu">$</span> fmap h f

<span class="kw">instance</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> <span class="dt">Applicative</span> (<span class="dt">IdentityT</span> f) <span class="kw">where</span>
    pure <span class="fu">=</span> <span class="dt">IdentityT</span> <span class="fu">.</span> pure
    (<span class="dt">IdentityT</span> h) <span class="fu">&lt;*&gt;</span> (<span class="dt">IdentityT</span> f) <span class="fu">=</span> <span class="dt">IdentityT</span> <span class="fu">$</span> h <span class="fu">&lt;*&gt;</span> f</code></pre>
<p><strong>Note:</strong><br />GHC extension <code>-XKindSignatures</code> lets you constrain <em>IdentityT</em>’s type parameter <code>f</code> to that kind (i.e. the kind required to create Functor and Applicative instances).</p>
<p>Now, this was just an exercise to ensure I understood what I was actually putting together (keep reading, it’s going to be no time before I realize I didn’t really understand what’s going on). GHC has another extension, named <code>-XGeneralizedNewtypeDeriving</code> that allows you to avoid the <em>chore</em> of writing by hand type class instances that could be inferred by the compiler. So the previous snippet becomes:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# OPTIONS_GHC -Wall #-}</span>
<span class="ot">{-# LANGUAGE KindSignatures, GeneralizedNewtypeDeriving #-}</span>

<span class="kw">module</span> <span class="dt">ApplicativeTransformers</span>
    ( <span class="dt">IdentityT</span>(<span class="fu">..</span>)
    ) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Applicative</span>

<span class="kw">newtype</span> <span class="dt">IdentityT</span> (<span class="ot">f ::</span> <span class="fu">*</span> <span class="ot">-&gt;</span> <span class="fu">*</span>) a <span class="fu">=</span> <span class="dt">IdentityT</span> {<span class="ot"> runIdentityT ::</span> f a }
    <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Functor</span>, <span class="dt">Applicative</span>)</code></pre>
<h2 id="implementing-the-actual-transformer">Implementing the actual transformer</h2>
<p>Ok, now with that in place, the next thing to do would be to write a transforming function that operates on <code>IdentityT</code>. What’s its type signature?</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">mapIdentityT ::</span> (f a <span class="ot">-&gt;</span> g b) <span class="ot">-&gt;</span> <span class="dt">IdentityT</span> f a <span class="ot">-&gt;</span> <span class="dt">IdentityT</span> g b
mapIdentityT h x <span class="fu">=</span> undefined</code></pre>
<p>I couldn’t find a way to apply <code>h</code> to <code>x</code> using just Applicative functions: the problem is that <code>fmap</code>, <code>pure</code>, etc. don’t operate on IdentityT but on the type it wraps. I thought it should have been possible to just do something like:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">mapIdentityT <span class="fu">=</span> fmap</code></pre>
<p><sub> Here, by the way, is where I realized the Applicative instance for IdentityT refers directly to the type parameter of the applicative functor wrapped by the newtype. </sub></p>
<p>Since the <code>IdentityT f a</code> implementation of <code>fmap</code> expects a function <code>a -&gt; b</code> instead of <code>f a -&gt; g b</code> I couldn’t use it. What I came up with wasn’t anything better than unwrapping and re-wrapping the IdentityT instance and just apply the function to the applicative that lives inside the newtype wrapper:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">mapIdentityT ::</span> (f a <span class="ot">-&gt;</span> g b) <span class="ot">-&gt;</span> <span class="dt">IdentityT</span> f a <span class="ot">-&gt;</span> <span class="dt">IdentityT</span> g b
mapIdentityT h <span class="fu">=</span> <span class="dt">IdentityT</span> <span class="fu">.</span> h <span class="fu">.</span> runIdentityT</code></pre>
<p>There is apparently really not much difference between a monadic and a “just” applicative implementation of the <strong>identity transformer</strong>. This somehow answers the first of those three question I asked initially or, at least stands for the Identity transformer.</p>
<h2 id="can-i-use-it">Can I use it?</h2>
<p>Let’s see what we can do with this applicative-only IdentityT.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">let</span> foo <span class="fu">=</span> <span class="dt">IdentityT</span> (<span class="dt">Just</span> <span class="dv">5</span>)
<span class="fu">&gt;</span> foo
<span class="dt">IdentityT</span> {runIdentityT <span class="fu">=</span> <span class="dt">Just</span> <span class="dv">5</span>}</code></pre>
<p>Ok, now we need a function <code>f a -&gt; g b</code> (let’s call it <code>bar</code> for the sake of meaningful names), which in this case would be <code>Num a =&gt; Maybe a -&gt; g b</code>. Lets say we want a list of strings, so the signature ends up being:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">bar ::</span> (<span class="dt">Num</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> [<span class="dt">String</span>]</code></pre>
<p>Its implementation is as follows:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">let</span> bar <span class="fu">=</span> maybe [] (pure <span class="fu">.</span> show)</code></pre>
<p>Finally we map <code>bar</code> to <code>foo</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> mapIdentityT bar foo
<span class="dt">IdentityT</span> {runIdentityT <span class="fu">=</span> [<span class="st">&quot;5&quot;</span>]}</code></pre>
<p>At least it works, although I’m not sure this answers the second of my questions (<em>Is it useful?</em>).</p>
<h3 id="wrap-up-and-next-steps">Wrap up and next steps</h3>
<p>Next thing to do is figuring out how to implement more complex transformers and probably learning about Yoneda and Coyoneda, whatever they are.</p>
<p>There’s something that does not feel right with this exploration, I’m probably missing something (part of the problem has to do with the fact I haven’t actually ever used monad transformers). So, feel free to let me know about nonsense I might have written here; I’m on Twitter <a href="https://twitter.com/nadirsampaoli">@nadirsampaoli</a>.</p>
<hr />
<p><sub> The source code for the thing I called ApplicativeTransformers is on Github: <a href="https://github.com/nadirs/applicative-transformers/"><strong>nadirs/applicative-transformers</strong></a> </sub></p>
]]></summary>
</entry>
<entry>
    <title>The developer's stance</title>
    <link href="http://nadirs.github.io/posts/the-developer-stance.html" />
    <id>http://nadirs.github.io/posts/the-developer-stance.html</id>
    <published>2013-11-09T00:00:00Z</published>
    <updated>2013-11-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November  9, 2013
    by Nadir Sampaoli
</div>

<p>This is a memorandum for my approach to the developer’s profession.</p>
<h2 id="art-science-and-craft">Art, Science and Craft</h2>
<p>Software development is quite more similar to a craftsman’s work than to art or science.</p>
<p>A problem can be solved not as much by demanding its solution to dogmatic principles or to a random creative approach (although creativity is often helpful when you’re stuck in a pursuit for a solution to a problem), but rather by resorting to experience. This is not to be intended in terms of years <sup id="orignote1"><a href="#footnote1">1</a></sup>, but rather as a result of iterating over the problem proposing ever different solutions, getting rid of the less effective ones as you go on.</p>
<p><sup id="footnote1"><a href="#orignote1">1</a></sup> There’s an adagio that goes: «<em>Try not to confuse 20 years of experience with one year repeated 20 times.» (cit. Unknown)</em></p>
<h2 id="focus-on-the-problem">Focus on The Problem™</h2>
<p>The actual reason we develop software is solving a Problem™. You should worry whether your purpose is using your tools to an end in itself, rather than actually using the best tool for the job.</p>
<h2 id="extend-your-tool-box">Extend your Tool Box</h2>
<p>Nonetheless try as hard as you can on adding many tools to your <em>professional toolbox</em>, as well as freeing yourself from the limits of a specific paradigm or philosophy. Also, each new technology acquired and lesson learned can (and should) be not only another tool in your partitioned box but possibly another wire in your knowledge circuit.<br />So you might gain the ability to accomplish some result in a shorter form, or solve a previously messy problem in a clearer way.</p>
<h2 id="conclusions">Conclusions</h2>
<p>It might sound as a cheap pun, but it makes sense: as a developer you should try to develop yourself as much as you find healthy, so you can develop better solutions in your coding tasks.</p>
]]></summary>
</entry>
<entry>
    <title>Read you a book for great good!</title>
    <link href="http://nadirs.github.io/posts/read-you-a-book-for-great-good.html" />
    <id>http://nadirs.github.io/posts/read-you-a-book-for-great-good.html</id>
    <published>2013-04-21T00:00:00Z</published>
    <updated>2013-04-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on April 21, 2013
    by Nadir Sampaoli
</div>

<p>Last september I decided to start a life-long plan of self-improvement: I started gathering info around the web (there are even some other blogs, like <a href="http://www.codinghorror.com">Coding Horror</a>, that provide their own list of suggested books for programmers and the like) about good technical readings and books to take advantage of the teachings that more experienced craftsmen and developers have been so kind to share with newcomers.</p>
<h2 id="code-complete-and-other-stories">Code Complete and other stories</h2>
<p>The first tome of my imaginary encyclopedia was <a href="http://cc2e.com/" title="Code Complete, 2nd Ed.">Code Complete</a> (2nd edition), by Steve McConnell. It’s a fairly large (took me almost three months to finish it) overview of software development fundamentals and tips about managing your projects (be they small or large).<br />The nicest thing about this book is that everything he states is backed by reasoning and statistics gathered through several years of on-field (someone would say <em>In Trenches</em>) experience.<br />I have to admit that some of the chapters concerning practical coding (like using flow structures and functional decomposition) didn’t come new to me, but I guess they were aimed to <em>completeness</em>.</p>
<p>Another book that deeply changed my approach towards facing my daily jungle is <a href="http://pragprog.com/the-pragmatic-programmer" title="The Pragmatic Programmer">The Pragmatic Programmer</a>.<br />It’s a gathering of several short (and very entertaining, if you ask me) anectodes used to represent real-world issues you probably have meet often before. It’s followed by practical examples and real-world applications of those teachings.</p>
]]></summary>
</entry>

</feed>
